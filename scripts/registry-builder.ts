import fs from "fs"
import { execSync } from "node:child_process"
import path from "path"
import { rimraf } from "rimraf"
import { registry } from "@/registry/components"
import { registrySchema, type Registry } from "@/registry/schema"
import { styles } from "@/registry/styles"

const ensureDir = (filePath: string) => {
  const dir = path.dirname(filePath)
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true })
  }
}

console.log("üìù Writing registry index...")
const result = registrySchema.safeParse(registry)
if (!result.success) {
  console.error(result.error)
  process.exit(1)
}

let index = `/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const Index: Record<string, any> = {`
for (const item of registry) {
  const resolveFiles = item.files?.map(file => `registry/minimal/${file.path}`)
  if (!resolveFiles) continue
  const componentPath = item.files?.[0]?.path
    ? item.type === "registry:example"
      ? `@/registry/${item.files[0].path}`
      : `@/registry/minimal/${item.files[0].path}`
    : ""
  index += `
  "${item.name}": {
    name: "${item.name}",
    description: "${item.description ?? ""}",
    type: "${item.type}",
    registryDependencies: ${JSON.stringify(item.registryDependencies)},
    files: [${item.files?.map(file => {
      const filePath = `registry/${item.type === "registry:example" ? "" : "minimal/"}${typeof file === "string" ? file : file.path}`
      const resolvedFilePath = path.resolve(filePath)
      return typeof file === "string"
        ? `"${resolvedFilePath}"`
        : `{
      path: "${filePath}",
      type: "${file.type}",
      target: "${file.target ?? ""}"
    }`
    })}],
    component: ${
      componentPath
        ? `React.lazy(async () => {
      const mod = await import("${componentPath}")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    })`
        : "null"
    },
    categories: ${JSON.stringify(item.categories)},
    meta: ${JSON.stringify(item.meta)},
  },`
}
index += `
  }`

console.log(`#Ô∏è‚É£  ${Object.keys(registry).length} components found`)

const indexFilePath = path.join(process.cwd(), "registry/__index__.tsx")
rimraf.sync(indexFilePath)
ensureDir(indexFilePath)
fs.writeFileSync(indexFilePath, index, "utf-8")

console.log("üìù Building index...")
console.log("üìù Setting up registry output paths...")
const APP_URL = process.env.NEXT_PUBLIC_BASE_URL || "https://ui.abdrhmniqbal.my.id"
const publicRegistryPath = path.join(process.cwd(), "public/r")
if (!fs.existsSync(publicRegistryPath)) {
  fs.mkdirSync(publicRegistryPath, { recursive: true })
}

const registryHeader = {
  $schema: "https://ui.shadcn.com/schema/registry.json",
  homepage: APP_URL,
  name: "dasar-ui",
}

const styleOutputPath = path.join(publicRegistryPath, "style")
const styleOutputIndexPath = path.join(styleOutputPath, "index.json")
const styleRegistry = { ...registryHeader, items: [...styles] }
const styleRegistryIndexJson = JSON.stringify(styleRegistry, null, 2)
ensureDir(styleOutputIndexPath)
fs.writeFileSync(styleOutputIndexPath, styleRegistryIndexJson)
execSync(`bun shadcn build ${styleOutputIndexPath} --output ${styleOutputPath}`)

for (const style of styles) {
  console.log(`üìù Writing registry for ${style.name} style...`)
  const styleDir = path.join(publicRegistryPath, style.name)
  if (!fs.existsSync(styleDir)) {
    fs.mkdirSync(styleDir, { recursive: true })
  }
  const filteredRegistry = result.data.filter(item => item.type !== "registry:example")
  const styleRegistryData = [...filteredRegistry]
  for (const item of styleRegistryData) {
    if (item.registryDependencies) {
      item.registryDependencies = item.registryDependencies.map(dependency => {
        if (dependency.includes("://")) {
          return dependency.replace(new URL(dependency).origin, APP_URL)
        }
        return dependency
      })
    }
  }
  const styleRegistryIndexJson = JSON.stringify(
    {
      ...registryHeader,
      items: styleRegistryData,
    },
    (key, value): Registry => {
      if (key === "registryDependencies") {
        return value.map((dependency: string) =>
          dependency.replace(new URL(dependency).origin, APP_URL)
        )
      }
      if (key === "files") {
        return value.map((file: { path: string }) => ({
          ...file,
          path: `registry/${style.name}/${file.path}`,
        }))
      }
      return value
    },
    2
  )
  const registryFilePath = path.join(styleDir, "index.json")
  if (fs.existsSync(registryFilePath)) {
    fs.unlinkSync(registryFilePath)
  }
  ensureDir(registryFilePath)
  fs.writeFileSync(registryFilePath, styleRegistryIndexJson)
  execSync(`bun shadcn build ${registryFilePath} --output ${styleDir}`)
}

console.log("‚úÖ Done!")
