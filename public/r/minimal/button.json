{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:ui",
  "title": "Button",
  "description": "An interactive element used to trigger actions.",
  "files": [
    {
      "path": "registry/minimal/ui/button.tsx",
      "content": "import * as React from 'react'\r\nimport { ark } from '@ark-ui/react/factory'\r\nimport { IconLoader2 } from '@tabler/icons-react'\r\nimport { tv, type VariantProps } from 'tailwind-variants'\r\n\r\nimport { cn, isElementWithAttr } from '@/lib/utils'\r\n\r\nconst buttonVariants = tv({\r\n  base: [\r\n    'items-center rounded-md cursor-pointer select-none appearance-none inline-flex font-medium isolate min-w-0 justify-center outline-none relative duration-[normal] transition-all whitespace-nowrap',\r\n    'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',\r\n    'disabled:pointer-events-none disabled:opacity-50',\r\n    'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\r\n    \"[&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0\",\r\n  ],\r\n  variants: {\r\n    variant: {\r\n      primary:\r\n        'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\r\n      destructive:\r\n        'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\r\n      outline:\r\n        'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\r\n      secondary:\r\n        'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\r\n      ghost:\r\n        'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\r\n      link: 'text-primary underline-offset-4 hover:underline',\r\n    },\r\n    size: {\r\n      xs: \"h-8 min-w-8 text-xs px-3 gap-2 has-[>svg]:px-2 [&_svg:not([class*='size-'])]:size-3.5\",\r\n      md: 'h-10 min-w-10 text-sm px-4 gap-2 has-[>svg]:px-3',\r\n      sm: 'h-9 min-w-9 text-sm gap-2 px-3.5 has-[>svg]:px-2.5',\r\n      lg: \"h-11 min-w-11 text-base px-4.5 gap-2 has-[>svg]:px-4 [&_svg:not([class*='size-'])]:size-4.5\",\r\n      xl: \"h-12 min-w-12 text-base px-5 gap-2.5 has-[>svg]:px-4.5 [&_svg:not([class*='size-'])]:size-5\",\r\n    },\r\n    iconOnly: {\r\n      true: '',\r\n    },\r\n    fullWidth: {\r\n      true: 'w-full',\r\n    },\r\n  },\r\n  compoundVariants: [\r\n    { size: 'xs', iconOnly: true, className: 'size-8' },\r\n    { size: 'sm', iconOnly: true, className: 'size-9' },\r\n    { size: 'md', iconOnly: true, className: 'size-10' },\r\n    { size: 'lg', iconOnly: true, className: 'size-11' },\r\n    { size: 'xl', iconOnly: true, className: 'size-12' },\r\n  ],\r\n  defaultVariants: {\r\n    variant: 'primary',\r\n    size: 'md',\r\n    iconOnly: false,\r\n  },\r\n})\r\n\r\ntype ButtonProps = React.ComponentProps<typeof ark.button> &\r\n  VariantProps<typeof buttonVariants> & {\r\n    loading?: boolean\r\n  }\r\n\r\nfunction Button({\r\n  className,\r\n  variant,\r\n  size,\r\n  fullWidth,\r\n  iconOnly,\r\n  loading,\r\n  disabled,\r\n  children,\r\n  ...props\r\n}: ButtonProps) {\r\n  const childArray = React.Children.toArray(children)\r\n  let content: React.ReactNode[] = childArray\r\n\r\n  if (loading) {\r\n    if (\r\n      isElementWithAttr<{ 'data-part'?: string; className?: string }>(\r\n        childArray[0],\r\n        'data-part',\r\n        'icon'\r\n      )\r\n    ) {\r\n      const origCls = childArray[0].props.className ?? ''\r\n      childArray[0] = (\r\n        <IconLoader2\r\n          key=\"loader\"\r\n          className={cn(origCls, 'animate-spin')}\r\n          aria-hidden\r\n        />\r\n      )\r\n    } else {\r\n      childArray.unshift(\r\n        <IconLoader2\r\n          key=\"loader\"\r\n          className=\"animate-spin\"\r\n          aria-hidden\r\n        />\r\n      )\r\n    }\r\n\r\n    content = childArray\r\n  }\r\n\r\n  return (\r\n    <ark.button\r\n      data-scope=\"button\"\r\n      className={cn(\r\n        buttonVariants({ variant, size, iconOnly, fullWidth, className })\r\n      )}\r\n      disabled={disabled || loading}\r\n      {...props}\r\n    >\r\n      {content}\r\n    </ark.button>\r\n  )\r\n}\r\n\r\nexport { Button, buttonVariants }\r\nexport type { ButtonProps }\r\n",
      "type": "registry:ui"
    }
  ]
}